# Виртуальные окружения

При разработке Python-приложений или использовании решений на Python, 
созданных другими разработчиками, может возникнуть ряд проблем, связанных с использованием библиотек различных версий. 
Для решения данных вопросов используется подход, основанный на построении виртуальных окружений – своего рода песочниц, 
в рамках которых запускается приложение со своими библиотеками, 
обновление и изменение которых не затронет другие приложение, использующие те же библиотеки.

Программное обеспечение, которое позволяет создавать виртуальные окружения в Python можно разделить на те, что входят в стандартную библиотеку Python и не входят в нее.

Начнем с инструментов, которые входят в PyPI. PyPI – это Python Package Index (PyPI) – репозиторий пакетов Python, доступный для любого разработчика и пользователя Python ().

- virtualenv

Это, наверное, одни из самых популярных инструментов, позволяющих создавать виртуальные окружения. Он прост в установке и использовании.
В общем, этот инструмент нужно обязательно освоить, как минимум, потому что описание развертывания и использования многих систем, созданных 
с использованием Python, включает в себя процесс создания виртуального окружения с помощью virtualenv.

- pyenv

Инструмент для изоляции версий Python. Чаще всего применяется, когда на одной машине вам нужно иметь несколько версий интерпретатора для 
тестирования на них разрабатываемого вами ПО.

Существуют ещё инструменты и plug-in’ы, выполняющие работу по изоляции частей системы Python, но мы их не будем рассматривать.

Инструменты, входящие в стандартную библиотеку Python.

- venv

Этот модуль появился в Python3 и не может быть использован для решения задачи изоляции в Python2. По своему функционалу очень похож на virtualenv. 
Если вы работаете с третьим Python, то можете смело использовать данный инструмент.

# Работа с виртуальными окружениями

## virtualenv

Virtualenv можно установить с использованием менеджера pip, либо скачать исходные коды проекта и установить приложение вручную. Поскольку большая часть 
людей используют установку с использованием, разберём именно её.

Для установки virtualenv откройте консоль и введите следующую команду:

```pip install virtualenv```

Далее необходимо создать виртуальное окружение. Виртуальное окружение создается следующей командой:

```virtualenv <имя_окружения>```

После выполнения данной команды, в текущем каталоге будет создан новый каталог с именем, которое вы укажете.

Для активации виртуального окружения воспользуйтесь командой (для Linux):

```> source <имя_окружения>/bin/activate```

для Windows команда будет выглядеть так:

```> <имя_окружения>\Scripts\activate.bat```

Команда source выполняет bash-скрипт без запуска второго bash-процесса. Если команда выполнилась успешно, то вы увидите, 
что перед приглашением в командной строке появилась дополнительная надпись, совпадающая с именем виртуального окружения.

Для деактивации виртуального окружения (выхода из него), введите команду deactivate для Linux или deactivate.bat, если вы работаете в Windows.

```> deactivate```

## venv

Устанавливать venv не нужно, т.к. он входит в стандартную библиотеку Python. 
Т.е. если вы установили себе Python, то venv у вас уже есть. Помните, что venv работает только в Python3!

Для создания виртуального окружения с именем <имя_окружения> с помощью venv выполните следующую команду:

```> python -m venv <имя_окружения>```

В результате будет создан каталог с именем, которое вы укажете.

Активация виртуального окружения в Linux выполняется командой:

```>source <имя_окружения>/bin/activate```

в Windows:

```><имя_окружения>\Scripts\activate.bat```

Деактивация выполняется командой deactivate (работает как в Windows, так и в Linux)

```>deactivate```




*****


# Глоссарий команд Virtualenv

```pip install virtualenv``` - установка

```virtualenv <имя виртуального окружения>``` - создание виртуального окружения 

```<имя виртуального окружения>\Scripts\activate``` - активация виртуального окружения

```deactivate``` - деактивация виртуального окружения

```--version``` - показывает версию виртуального окружения и его расположение

